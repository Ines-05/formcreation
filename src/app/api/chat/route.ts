import { generateText } from 'ai';
import { formModel } from '@/lib/ai';
import { z } from 'zod';

const ChatRequestSchema = z.object({
  message: z.string(),
  conversationHistory: z.array(z.object({
    role: z.enum(['user', 'assistant']),
    content: z.string(),
  })),
});

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { message, conversationHistory } = ChatRequestSchema.parse(body);

    // Construire le contexte
    const conversationContext = conversationHistory
      .slice(-10)
      .map(msg => `${msg.role}: ${msg.content}`)
      .join('\n');

    // D'abord, d√©tecter l'intention de l'utilisateur
    const intentPrompt = `Analyse ce message pour d√©terminer si l'utilisateur veut cr√©er un formulaire.

${conversationContext ? `Conversation pr√©c√©dente:\n${conversationContext}\n\n` : ''}Message actuel: ${message}

L'utilisateur exprime-t-il le d√©sir ou l'intention de cr√©er un formulaire (sondage, questionnaire, etc.) ?

R√©ponds UNIQUEMENT par "OUI" ou "NON" suivi d'une br√®ve explication (1 phrase).

Exemples OUI:
- "je veux cr√©er un formulaire"
- "aide-moi √† faire un sondage"
- "j'ai besoin d'un questionnaire"
- "tu peux m'aider √† cr√©er un formulaire ?"
- "je voudrais faire un formulaire de contact"

Exemples NON:
- "bonjour"
- "comment √ßa marche ?"
- "c'est quoi Tally ?"
- "merci"`;

    const { text: intentResult } = await generateText({
      model: formModel,
      prompt: intentPrompt,
    });

    const shouldStartFormCreation = intentResult.toLowerCase().startsWith('oui');

    if (shouldStartFormCreation) {
      // L'utilisateur veut cr√©er un formulaire
      return Response.json({ 
        shouldStartFormCreation: true,
        reply: null
      });
    }

    // Conversation normale
    const conversationPrompt = `Tu es un assistant amical et intelligent sp√©cialis√© dans la cr√©ation de formulaires. Tu aides les utilisateurs avec Google Forms, Tally et Typeform.

${conversationContext ? `Conversation pr√©c√©dente:\n${conversationContext}\n\n` : ''}Message actuel: ${message}

INSTRUCTIONS:
- R√©ponds de mani√®re naturelle et conversationnelle
- Si c'est une salutation, r√©ponds chaleureusement et pr√©sente-toi bri√®vement
- Si l'utilisateur pose une question, r√©ponds-y
- Si l'utilisateur demande des informations sur les outils, explique bri√®vement
- Reste concis (2-4 phrases max)
- Sois amical et utilise des emojis si appropri√©

EXEMPLES:
- User: "bonjour" ‚Üí "üëã Bonjour ! Je suis ton assistant de cr√©ation de formulaires. Je peux t'aider √† cr√©er des formulaires avec Google Forms, Tally ou Typeform. Que puis-je faire pour toi ?"
- User: "comment √ßa marche ?" ‚Üí "C'est simple ! Dis-moi quel type de formulaire tu veux cr√©er (sondage, inscription, contact...), je te guiderai pour choisir l'outil adapt√© et le construire ensemble. üòä"
- User: "c'est quoi Tally ?" ‚Üí "Tally est un outil de cr√©ation de formulaires moderne et gratuit. Il offre une interface intuitive et de nombreuses fonctionnalit√©s. C'est parfait pour des formulaires simples et √©l√©gants ! üìã"`;

    const { text: reply } = await generateText({
      model: formModel,
      prompt: conversationPrompt,
    });

    return Response.json({ 
      shouldStartFormCreation: false,
      reply 
    });

  } catch (error) {
    console.error('Erreur chat:', error);
    return Response.json(
      { error: 'Erreur lors de la conversation' },
      { status: 500 }
    );
  }
}
